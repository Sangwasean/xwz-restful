{
  "openapi": "3.0.1",
  "info": {
    "title": "Parking Management System",
    "description": "API documentation for the Parking Management System",
    "version": "1.0.0",
    "contact": {
      "name": "Sean SANGWA HIRWA",
      "email": "kdsean11@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "url": "http://localhost:9999/api/v1"
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "summary": "Login a user",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/parking": {
      "get": {
        "summary": "Get all parking slots",
        "description": "Retrieve a list of all parking slots regardless of availability",
        "tags": ["Parking"],
        "responses": {
          "200": {
            "description": "Successfully retrieved all parking slots",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParkingResponse"
                  }
                }
              }
            }
          }
        }
      },

      "post": {
        "summary": "Create a new parking slot (Admin only)",
        "tags": ["Parking"],
        "security": [
          {
            "bearerAuth": []
          }
        ],

        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Parking"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Parking slot created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        }
      }
    },
    "/parking/available": {
      "get": {
        "summary": "Get available parking slots",
        "description": "Retrieve a list of currently available parking slots",
        "tags": ["Parking"],
        "responses": {
          "200": {
            "description": "Successfully retrieved available parking slots",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParkingResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/parking/{id}": {
      "get": {
        "summary": "Get parking slot by ID",
        "tags": ["Parking"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Parking slot details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingResponse"
                }
              }
            }
          },
          "404": {
            "description": "Parking slot not found"
          }
        }
      },
      "patch": {
        "summary": "Update a parking slot",
        "tags": ["Parking"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParkingUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Parking slot updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not authorized"
          }
        }
      }
    },
    "/vehicles": {
      "get": {
        "summary": "Get all vehicles for current user",
        "tags": ["Vehicles"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of vehicles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Register a new vehicle",
        "tags": ["Vehicles"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Vehicle"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vehicle registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Plate number already exists"
          }
        }
      }
    },
    "/vehicles/{id}": {
      "get": {
        "summary": "Get vehicle by ID",
        "tags": ["Vehicles"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicle details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleResponse"
                }
              }
            }
          },
          "404": {
            "description": "Vehicle not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a vehicle",
        "tags": ["Vehicles"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Vehicle deleted"
          },
          "400": {
            "description": "Bad request - Vehicle has active tickets"
          }
        }
      }
    },
    "/tickets": {
      "get": {
        "summary": "Get all tickets for current user",
        "tags": ["tickets"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of tickets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ticketResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new ticket",
        "tags": ["tickets"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticket"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ticket created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Parking slot not available"
          }
        }
      }
    },
    "/tickets/{id}": {
      "get": {
        "summary": "Get ticket by ID",
        "tags": ["Tickets"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketResponse"
                }
              }
            }
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      },
      "patch": {
        "summary": "Extend ticket duration",
        "tags": ["Tickets"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendTicket"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ticket extended",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Cannot extend tickets"
          }
        }
      },
      "delete": {
        "summary": "Cancel a ticket",
        "tags": ["Tickets"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket cancelled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Cannot cancel ticket"
          }
        }
      }
    },
    "/payments": {
      "get": {
        "summary": "Get all payments for current user",
        "tags": ["Payments"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of payments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Process a payment",
        "tags": ["Payments"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Payment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Payment failed"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "password123"
          }
        },
        "required": ["email", "password"]
      },
      "User": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "minLength": 2,
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "minLength": 2,
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "example": "password123"
          },
          "role": {
            "type": "string",
            "enum": ["ADMIN", "PARKING_ATTENDANT"],
            "default": "PARKING_ATTENDANT",
            "example": "PARKING_ATTENDANT"
          }
        },
        "required": ["firstName", "lastName", "email", "password"]
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655450000"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "role": {
            "type": "string",
            "example": "PARKING_ATTENDANT"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Login successful"
          },
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "data": {
            "$ref": "#/components/schemas/UserResponse"
          }
        }
      },
      "Parking": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example":"sean"
          },
          "location": {
            "type": "string",
            "example": "Nyabugogo"
          },
          "fee": {
            "type": "number",
            "example": "0.2$"
          }
        },
        "required": ["name", "location", "fee"]
      },
      "ParkingResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655450000"
          },
          "name": {
            "type": "string",
            "example":"sean"
          },
          "location": {
            "type": "string",
            "example": "Nyabugogo"
          },
          "fee": {
            "type": "number",
            "example": "0.2$"
          },
          "isAvailable": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ParkingUpdate": {
        "type": "object",
        "properties": {
          "isAvailable": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "Vehicle": {
        "type": "object",
        "properties": {
          "plateNumber": {
            "type": "string",
            "example": "RAA123A"
          }
        },
        "required": ["plateNumber"]
      },
      "VehicleResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655450000"
          },
          "plateNumber": {
            "type": "string",
            "example": "RAA123A"
          },
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Ticket": {
        "type": "object",
        "properties": {
          "parkingId": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655450000"
          },
          "vehicleId": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655450000"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-12-01T08:00:00Z"
          },
          "durationHours": {
            "type": "integer",
            "minimum": 1,
            "example": 2
          }
        },
        "required": ["parkingId", "vehicleId", "startTime", "durationHours"]
      },
      "ExtendTicket": {
        "type": "object",
        "properties": {
          "additionalHours": {
            "type": "integer",
            "minimum": 1,
            "example": 1
          }
        },
        "required": ["additionalHours"]
      },
      "TicketResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655450000"
          },
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "parking": {
            "$ref": "#/components/schemas/ParkingSlotResponse"
          },
          "vehicle": {
            "$ref": "#/components/schemas/VehicleResponse"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-12-01T08:00:00Z"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-12-01T10:00:00Z"
          },
          "status": {
            "type": "string",
            "enum": ["ACTIVE", "COMPLETED", "CANCELLED", "OVERSTAY"],
            "example": "ACTIVE"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Payment": {
        "type": "object",
        "properties": {
          "ticketId": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655450000"
          },
          "amount": {
            "type": "number",
            "minimum": 0,
            "example": 5000
          },
          "method": {
            "type": "string",
            "enum": ["CASH", "CARD", "MOBILE"],
            "example": "CARD"
          }
        },
        "required": ["ticketId", "amount", "method"]
      },
      "PaymentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655450000"
          },
          "ticket": {
            "$ref": "#/components/schemas/TicketResponse"
          },
          "amount": {
            "type": "number",
            "example": 5000
          },
          "method": {
            "type": "string",
            "example": "CARD"
          },
          "status": {
            "type": "string",
            "enum": ["PENDING", "COMPLETED", "FAILED", "REFUNDED"],
            "example": "COMPLETED"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  }
}
